{"version":3,"sources":["webpack:///src/app/core/authentication/authentication.module.ts","webpack:///src/app/core/authentication/reset/reset.component.ts","webpack:///src/app/core/authentication/reset/reset.component.html","webpack:///src/app/core/authentication/authentication-routing.module.ts","webpack:///src/app/core/authentication/signin/signin.component.ts","webpack:///src/app/core/authentication/signin/signin.component.html","webpack:///src/app/core/authentication/forgot/forgot.component.ts","webpack:///src/app/core/authentication/forgot/forgot.component.html","webpack:///src/app/core/helpers/password-validator.ts","webpack:///src/app/core/helpers/must-match.ts"],"names":["AuthenticationModule","forChild","ResetComponent","_authService","formBuilder","submitted","loading","error","passwordType","togglePasswordShow","resetPasswordForm","group","email","required","pattern","password","hasNumber","hasCapitalCase","hasSmallCase","hasSpecialCharacters","minLength","confirm_password","validator","console","log","controls","invalid","resetPassowrd","value","subscribe","res","reset","detail","errorMessage","toggleShowPassword","resetPassword","AuthRoutes","path","component","SigninComponent","_route","hasError","signinForm","username","remember_me","signIn","pipe","ForgotComponent","forgotPasswordForm","forgotPassword","PasswordValidator","regex","control","valid","test","MustMatch","controlName","matchingControlName","formGroup","matchingControl","errors","mustMatch","setErrors"],"mappings":"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","file":"core-authentication-authentication-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { AuthRoutes } from './authentication-routing.module';\n\nimport { CoreModule } from '../core.module';\nimport { ForgotComponent } from './forgot/forgot.component';\nimport { SigninComponent } from './signin/signin.component';\nimport { ResetComponent } from './reset/reset.component';\n@NgModule({\n  declarations: [SigninComponent, ForgotComponent, ResetComponent],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(AuthRoutes),\n    FormsModule,\n    ReactiveFormsModule,\n    CoreModule,\n  ],\n})\nexport class AuthenticationModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from 'src/app/services';\nimport { MustMatch } from '../../helpers/must-match';\nimport { PasswordValidator } from '../../helpers/password-validator';\n@Component({\n  selector: 'app-reset',\n  templateUrl: './reset.component.html',\n  styleUrls: ['./reset.component.scss']\n})\nexport class ResetComponent implements OnInit {\n  public resetPasswordForm!: FormGroup;\n  public submitted: boolean = false;\n  public loading: boolean = false;\n  public error: boolean = false;\n  public errorMessage!: string;\n  public passwordType: String = 'password';\n  public togglePasswordShow: Boolean = true;\n\n  constructor(\n    private _authService:AuthService,\n    private formBuilder: FormBuilder\n  ) { }\n\n  ngOnInit(): void {\n    this.resetPasswordForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email, Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')]],\n      password: ['', \n        [\n          Validators.required, \n          PasswordValidator(/\\d/, {hasNumber: true} ),\n          PasswordValidator(/[A-Z]/, {hasCapitalCase: true} ),\n          PasswordValidator(/[a-z]/, {hasSmallCase: true} ),\n          PasswordValidator(/[-!$%^&*()_+|~=`{}\\[\\]:\\/;<>?,.@#]/, {hasSpecialCharacters: true} ),\n          Validators.minLength(8) \n        ]\n      ],\n      confirm_password: ['', Validators.required]\n    }, {\n      validator: [ \n        MustMatch('password', 'confirm_password')\n      ],\n    });\n  }\n\n\n  get f() { \n    console.log(this.resetPasswordForm.controls);\n    return this.resetPasswordForm.controls; \n  }\n\n  resetPassword() {\n    this.error = false;\n    this.submitted = true;\n    this.loading = true;\n\n    if (this.resetPasswordForm.invalid) {\n      this.loading = false;\n      return;\n    }\n\n     \n    this._authService.resetPassowrd(this.resetPasswordForm.value).subscribe((res) => {\n      if (res) {\n        this.loading = false;\n        this.submitted = false;\n      }\n\n      this.resetPasswordForm.reset();\n\n    }, error => {\n\n      this.error = true;\n      this.loading = false;\n      this.submitted = false;\n      console.log('THERE IS AN ERROR', error);\n      if (error.detail) {\n        this.errorMessage = error.detail;\n      }\n    })\n  }\n\n  toggleShowPassword() {\n    this.togglePasswordShow = !this.togglePasswordShow;\n    this.passwordType = this._authService.toggleShowPassword(this.passwordType);\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"row justify-content-center\">\n    <div class=\"col-12 col-md-5 col-xl-4 my-5\">\n      <h1 class=\"display-4 text-center mb-3\">\n        Reset Password\n      </h1>\n      <p class=\"text-muted text-center mb-5\"></p>\n\n      <div *ngIf=\"error\">{{errorMessage}}</div>\n      <form class=\"authentication__form\" [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"resetPassword()\">\n        <div class=\"form-group\">\n          <div class=\"form__password\">\n            <label class=\"form-label\" for=\"password\">Password</label>\n            <input aria_label=\"password\" id=\"password\" formControlName=\"password\" type={{passwordType}}\n              class=\"form-control form-control-appended\" placeholder=\"Enter your password\" />\n            <div *ngIf=\"submitted && f.password.errors\" class=\"form-invalid-feedback\">\n              <div *ngIf=\"f.password.errors.required\">Password is required</div>\n              <div *ngIf=\"f.password.errors.minlength\">Password must be at least 8 characters</div>\n              <div *ngIf=\"f.password.hasError('hasNumber')\">Password must have at least 1 number</div>\n              <div *ngIf=\"f.password.hasError('hasCapitalCase')\">Password must have at least 1 capital case</div>\n              <div *ngIf=\"f.password.hasError('hasSmallCase')\">Password must have at least 1 small case</div>\n              <div *ngIf=\"f.password.hasError('hasSpecialCharacters')\">Password must have at least 1 special character\n              </div>\n            </div>\n            <div (click)=\"toggleShowPassword()\" class=\"form-control-icon password\"\n              [ngClass]=\"{'is--hidden': submitted && f.password.errors}\">\n              <span class=\"\">\n                <i class=\"fa fa-eye\" *ngIf=\"togglePasswordShow\"></i>\n                <i class=\"fa fa-eye-slash\" *ngIf=\"!togglePasswordShow\"></i>\n              </span>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <div class=\"form__password\">\n            <label class=\"form-label\" for=\"confirm_password\">Confirm Password</label>\n            <input aria_label=\"confirm password\" id=\"confirm_password\" formControlName=\"confirm_password\"\n              type={{passwordType}} class=\"form-control form-control-appended\" placeholder=\"Enter your password\" />\n            <div (click)=\"toggleShowPassword()\" class=\"form-control-icon password\"\n              [ngClass]=\"{'is--hidden': submitted && f.password.errors}\">\n              <span class=\"\">\n                <i class=\"fa fa-eye\" *ngIf=\"togglePasswordShow\"></i>\n                <i class=\"fa fa-eye-slash\" *ngIf=\"!togglePasswordShow\"></i>\n              </span>\n            </div>\n          </div>\n          <div *ngIf=\"submitted && f.confirm_password.errors\" class=\"form-invalid-feedback\">\n            <div *ngIf=\"f.confirm_password.errors.required\">Password is required</div>\n            <div *ngIf=\"f.confirm_password.errors.required\">Password Mismatch</div>\n          </div>\n        </div>\n        <button [attr.disabled]=\"loading ? true: null\" type=\"submit\" class=\"btn btn-block btn-primary mb-3 lift\">\n          <span class=\"spark-text has--loading\" [ngClass]=\"{'has--loading': loading}\">\n            {{ loading ? 'Loading' : 'Reset Passowrd' }}\n          </span>\n        </button>\n      </form>\n    </div>\n  </div>\n</div>","import { Routes } from '@angular/router';\n\nimport { ForgotComponent } from './forgot/forgot.component';\nimport { LockScreenComponent } from './lock-screen/lock-screen.component';\nimport { ResetComponent } from './reset/reset.component';\nimport { SigninComponent } from './signin/signin.component';\n\nexport const AuthRoutes: Routes = [\n  { path: 'signin', component: SigninComponent },\n  { path: 'forgot-password', component: ForgotComponent },\n  { path: 'reset-password', component: ResetComponent },\n  { path: 'lockscreen', component: LockScreenComponent },\n];\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { take } from 'rxjs/operators';\n\nimport { AuthService } from '../../../services'\n@Component({\n  selector: 'app-signin',\n  templateUrl: './signin.component.html',\n  styleUrls: ['./signin.component.scss']\n})\nexport class SigninComponent implements OnInit {\n  public signinForm!: FormGroup;\n\n  public submitted: Boolean = false;\n  public loading: Boolean = false;\n  public passwordType: String = 'password';\n  public togglePasswordShow: Boolean = true;\n  public hasError: Boolean = false;\n  public error: String = '';\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private _route: Router,\n    private _authService: AuthService\n  ) { }\n\n  ngOnInit(): void {\n    this.signinForm = this.formBuilder.group({\n      username: ['', [Validators.required, Validators.email, Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')]],\n    password: ['', Validators.required],\n      remember_me: [],\n    });\n  }\n  // convenience getter for easy access to form fields\n  get f() {\n    console.log('THE ERRORS', this.signinForm.controls)\n    return this.signinForm.controls;\n  }\n  signIn() {\n    this.submitted = true;\n    this.hasError = false;\n    this.error = '';\n\n    if (this.signinForm.invalid) {\n      return;\n    }\n\n    this.loading = true;\n\n    this._authService.signIn(this.signinForm.value)\n    .pipe(take(1))\n    .subscribe(\n      () => {\n        this.loading = false;\n        this.submitted = false;\n      },\n      (error) => {\n        this.loading = false;\n        this.submitted = false;\n        this.hasError = true;\n        console.log('SIGNIN ERROR', error)\n\n          error === 'Invalid credentials given.'\n            ? this.error = 'Wrong Username/Password Combination'\n            : this.error = 'Oops! You caught us doing some house keeping. Try again after a few minutes. Kindly contact your administrator if issue persists!';\n      \n      }\n    );\n  }\n\n  toggleShowPassword() {\n    this.togglePasswordShow = !this.togglePasswordShow;\n    this.passwordType = this._authService.toggleShowPassword(this.passwordType);\n  }\n\n}\n","<!-- todo: standard all the label fonts for auth pages -->\n<div class=\"container\">\n  <div class=\"row justify-content-center\">\n    <div class=\"col-12 col-md-5 col-xl-4 my-5\">\n      <h1 class=\"display-4 text-center mb-3\">\n        Sign In\n      </h1>\n      <p class=\"text-muted text-center mb-5\">\n        Gain access to our dashboard\n      </p>\n      <span *ngIf=\"hasError\">{{error}}</span>\n      <form class=\"authentication__form\" [formGroup]=\"signinForm\" (ngSubmit)=\"signIn()\">\n        <div class=\"form-group\">\n          <label class=\"form-label\" for=\"signin-email\">Email Address</label>\n          <input aria-label=\"Email sign in\" id=\"signin-email\" type=\"email\" name=\"email\" class=\"form-control\"\n            formControlName=\"username\" placeholder=\"name@address.com\" />\n          <div *ngIf=\"submitted && f.username.errors\" class=\"form-invalid-feedback\"\n            [ngClass]=\"{'form.is-invalid': submitted && f.username.errors}\">\n            <div *ngIf=\"f.username.errors.required\">Email address is required</div>\n            <div *ngIf=\"f.username.errors.pattern || f.username.errors.email\">Enter a valid email</div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <div class=\"row\">\n            <div class=\"col\">\n              <label class=\"form-label\" for=\"password\">Password</label>\n            </div>\n            <div class=\"col-auto\">\n              <a [routerLink]=\"['/forgot-password']\" class=\"form-text form-link forgot small\"> Forgot password? </a>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <input aria_label=\"password\" id=\"password\" formControlName=\"password\" type={{passwordType}}\n              class=\"form-control form-control-appended\" placeholder=\"Enter your password\" />\n            <div *ngIf=\"submitted && f.password.errors\" class=\"form-invalid-feedback\"\n              [ngClass]=\"{'form.is-invalid': submitted && f.password.errors}\">\n              <div *ngIf=\"f.password.errors.required\">Password is required</div>\n            </div>\n            <div (click)=\"toggleShowPassword()\" class=\"form-control-icon password\"\n              [ngClass]=\"{'is--hidden': submitted && f.password.errors}\">\n              <span class=\"\">\n                <i class=\"fa fa-eye\" *ngIf=\"togglePasswordShow\"></i>\n                <i class=\"fa fa-eye-slash\" *ngIf=\"!togglePasswordShow\"></i>\n              </span>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group form-check\">\n          <input aria_label=\"Remember me\" type=\"checkbox\" formControlName=\"remember_me\" id=\"rememberMe\"\n            class=\"form-check-input\" />\n          <label class=\"form-label\" for=\"rememberMe\" class=\"form-check-label\">Remember Me</label>\n        </div>\n        <button [attr.disabled]=\"loading ? true: null\" type=\"submit\" class=\"btn btn btn-block btn-primary mb-3 lift\">\n          <span class=\"spark-text has--loading\" [ngClass]=\"{'has--loading': loading}\">\n            {{ loading ? 'Signing In' : 'Sign In' }}\n          </span>\n        </button>\n      </form>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from 'src/app/services';\n\n@Component({\n  selector: 'app-forgot',\n  templateUrl: './forgot.component.html',\n  styleUrls: ['./forgot.component.scss']\n})\nexport class ForgotComponent implements OnInit {\n  public forgotPasswordForm!: FormGroup;\n  public submitted: boolean = false;\n  public loading: boolean = false;\n  public error: boolean = false;\n  public errorMessage!: string;\n\n  constructor(\n    private _authService: AuthService,\n    private formBuilder: FormBuilder\n  ) { }\n\n  ngOnInit(): void {\n    this.forgotPasswordForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email, Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')]],\n    })\n\n  }\n\n  get f() {\n    console.log(this.forgotPasswordForm.controls);\n    return this.forgotPasswordForm.controls;\n  }\n\n  forgotPassword() {\n    this.error = false;\n    this.submitted = true;\n    this.loading = true;\n\n    if (this.forgotPasswordForm.invalid) {\n      this.loading = false;\n      return;\n    }\n\n\n    this._authService.forgotPassword(this.forgotPasswordForm.value).subscribe((res) => {\n      if (res) {\n        this.loading = false;\n        this.submitted = false;\n      }\n\n      if (res.detail === 'Failed to send email.') {\n        this.error = true;\n        this.errorMessage = res.detail;\n        return;\n      }\n\n      this.forgotPasswordForm.reset();\n\n    }, error => {\n\n      this.error = true;\n      this.loading = false;\n      this.submitted = false;\n      console.log('THERE IS AN ERROR', error);\n      if (error.detail) {\n        this.errorMessage = error.detail;\n      }\n    })\n  }\n\n  resetPassword() {\n\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"row justify-content-center\">\n    <div class=\"col-12 col-md-5 col-xl-4 my-5\">\n      <h1 class=\"display-4 text-center mb-3\">\n        Password reset\n      </h1>\n      <p class=\"text-muted text-center mb-5\">\n        Enter your email to get a password reset link.\n      </p>\n      <div *ngIf=\"error\">{{errorMessage}}</div>\n      <form class=\"authentication__form\" [formGroup]=\"forgotPasswordForm\" (ngSubmit)=\"forgotPassword()\">\n        <div class=\"form-group\">\n          <label for=\"signin-email\">Email Address</label>\n          <input aria-label=\"Email sign in\" id=\"signin-email\" type=\"email\" name=\"email\" class=\"form-control\"\n            formControlName=\"email\" placeholder=\"name@address.com\"\n            [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\n          <div *ngIf=\"submitted && f.email.errors\" class=\"form-invalid-feedback\"\n            [ngClass]=\"{'form.is-invalid': submitted && f.email.errors}\">\n            <div *ngIf=\"f.email.errors.required\">Email address is required</div>\n            <div *ngIf=\"f.email.errors.pattern || f.email.errors.email\">Enter a valid email</div>\n          </div>\n        </div>\n        <button [attr.disabled]=\"loading ? true: null\" type=\"submit\" class=\"btn btn-lg btn-block btn-primary mb-3 lift\">\n          <span class=\"spark-text has--loading\" [ngClass]=\"{'has--loading': loading}\">\n            {{ loading ? 'Loading' : 'Get Instructions' }}\n          </span>\n        </button>\n      </form>\n      <div class=\"forgot__remember-me-link\">\n        <p class=\"text-center\">Remembered your login?\n          <a [routerLink]=\"['/signin']\"> Sign In </a>\n        </p>\n      </div>\n    </div>\n  </div>\n</div>","import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\n\nexport function PasswordValidator(regex: RegExp, error: ValidationErrors): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } => {\n        if (!control.value) {\n            //if control is empty return no error\n            return null!;\n        }\n\n        //check the value of the control agains regex supplied\n        const valid = regex.test(control.value);\n\n        return valid ? null! : error!;\n    }\n}\n","import { FormGroup } from '@angular/forms';\n\nexport function MustMatch( controlName: string, matchingControlName: string ) {\n    return(formGroup: FormGroup) => {\n        const control = formGroup.controls[controlName];\n        const matchingControl = formGroup.controls[matchingControlName];\n\n        if ( matchingControl.errors && !matchingControl.errors.mustMatch ) {\n            //if there's another validator with which found an error\n            return;\n        }\n\n        if ( control.value !== matchingControl.value ) {\n            matchingControl.setErrors({ mustMatch: true});\n        } else {\n            matchingControl.setErrors(null);\n        }\n    }\n}"]}