{"version":3,"sources":["./src/app/core/authentication/authentication.module.ts","./src/app/core/authentication/reset/reset.component.ts","./src/app/core/authentication/reset/reset.component.html","./src/app/core/authentication/authentication-routing.module.ts","./src/app/core/authentication/signin/signin.component.ts","./src/app/core/authentication/signin/signin.component.html","./src/app/core/authentication/forgot/forgot.component.ts","./src/app/core/authentication/forgot/forgot.component.html","./src/app/core/helpers/password-validator.ts","./src/app/core/helpers/must-match.ts"],"names":[],"mappings":"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","file":"core-authentication-authentication-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { AuthRoutes } from './authentication-routing.module';\n\nimport { CoreModule } from '../core.module';\nimport { ForgotComponent } from './forgot/forgot.component';\nimport { SigninComponent } from './signin/signin.component';\nimport { ResetComponent } from './reset/reset.component';\n@NgModule({\n  declarations: [SigninComponent, ForgotComponent, ResetComponent],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(AuthRoutes),\n    FormsModule,\n    ReactiveFormsModule,\n    CoreModule,\n  ],\n})\nexport class AuthenticationModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from 'src/app/services';\nimport { MustMatch } from '../../helpers/must-match';\nimport { PasswordValidator } from '../../helpers/password-validator';\n@Component({\n  selector: 'app-reset',\n  templateUrl: './reset.component.html',\n  styleUrls: ['./reset.component.scss']\n})\nexport class ResetComponent implements OnInit {\n  public resetPasswordForm!: FormGroup;\n  public submitted: boolean = false;\n  public loading: boolean = false;\n  public error: boolean = false;\n  public errorMessage!: string;\n  public passwordType: String = 'password';\n  public togglePasswordShow: Boolean = true;\n\n  constructor(\n    private _authService:AuthService,\n    private formBuilder: FormBuilder\n  ) { }\n\n  ngOnInit(): void {\n    this.resetPasswordForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email, Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')]],\n      password: ['', \n        [\n          Validators.required, \n          PasswordValidator(/\\d/, {hasNumber: true} ),\n          PasswordValidator(/[A-Z]/, {hasCapitalCase: true} ),\n          PasswordValidator(/[a-z]/, {hasSmallCase: true} ),\n          PasswordValidator(/[-!$%^&*()_+|~=`{}\\[\\]:\\/;<>?,.@#]/, {hasSpecialCharacters: true} ),\n          Validators.minLength(8) \n        ]\n      ],\n      confirm_password: ['', Validators.required]\n    }, {\n      validator: [ \n        MustMatch('password', 'confirm_password')\n      ],\n    });\n  }\n\n\n  get f() { \n    console.log(this.resetPasswordForm.controls);\n    return this.resetPasswordForm.controls; \n  }\n\n  resetPassword() {\n    this.error = false;\n    this.submitted = true;\n    this.loading = true;\n\n    if (this.resetPasswordForm.invalid) {\n      this.loading = false;\n      return;\n    }\n\n     \n    this._authService.resetPassowrd(this.resetPasswordForm.value).subscribe((res) => {\n      if (res) {\n        this.loading = false;\n        this.submitted = false;\n      }\n\n      this.resetPasswordForm.reset();\n\n    }, error => {\n\n      this.error = true;\n      this.loading = false;\n      this.submitted = false;\n      console.log('THERE IS AN ERROR', error);\n      if (error.detail) {\n        this.errorMessage = error.detail;\n      }\n    })\n  }\n\n  toggleShowPassword() {\n    this.togglePasswordShow = !this.togglePasswordShow;\n    this.passwordType = this._authService.toggleShowPassword(this.passwordType);\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"row justify-content-center\">\n    <div class=\"col-12 col-md-5 col-xl-4 my-5\">\n      <h1 class=\"display-4 text-center mb-3\">\n        Reset Password\n      </h1>\n      <p class=\"text-muted text-center mb-5\"></p>\n\n      <div *ngIf=\"error\">{{errorMessage}}</div>\n      <form class=\"authentication__form\" [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"resetPassword()\">\n        <div class=\"form-group\">\n          <div class=\"form__password\">\n            <label class=\"form-label\" for=\"password\">Password</label>\n            <input aria_label=\"password\" id=\"password\" formControlName=\"password\" type={{passwordType}}\n              class=\"form-control form-control-appended\" placeholder=\"Enter your password\" />\n            <div *ngIf=\"submitted && f.password.errors\" class=\"form-invalid-feedback\">\n              <div *ngIf=\"f.password.errors.required\">Password is required</div>\n              <div *ngIf=\"f.password.errors.minlength\">Password must be at least 8 characters</div>\n              <div *ngIf=\"f.password.hasError('hasNumber')\">Password must have at least 1 number</div>\n              <div *ngIf=\"f.password.hasError('hasCapitalCase')\">Password must have at least 1 capital case</div>\n              <div *ngIf=\"f.password.hasError('hasSmallCase')\">Password must have at least 1 small case</div>\n              <div *ngIf=\"f.password.hasError('hasSpecialCharacters')\">Password must have at least 1 special character\n              </div>\n            </div>\n            <div (click)=\"toggleShowPassword()\" class=\"form-control-icon password\"\n              [ngClass]=\"{'is--hidden': submitted && f.password.errors}\">\n              <span class=\"\">\n                <i class=\"fa fa-eye\" *ngIf=\"togglePasswordShow\"></i>\n                <i class=\"fa fa-eye-slash\" *ngIf=\"!togglePasswordShow\"></i>\n              </span>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <div class=\"form__password\">\n            <label class=\"form-label\" for=\"confirm_password\">Confirm Password</label>\n            <input aria_label=\"confirm password\" id=\"confirm_password\" formControlName=\"confirm_password\"\n              type={{passwordType}} class=\"form-control form-control-appended\" placeholder=\"Enter your password\" />\n            <div (click)=\"toggleShowPassword()\" class=\"form-control-icon password\"\n              [ngClass]=\"{'is--hidden': submitted && f.password.errors}\">\n              <span class=\"\">\n                <i class=\"fa fa-eye\" *ngIf=\"togglePasswordShow\"></i>\n                <i class=\"fa fa-eye-slash\" *ngIf=\"!togglePasswordShow\"></i>\n              </span>\n            </div>\n          </div>\n          <div *ngIf=\"submitted && f.confirm_password.errors\" class=\"form-invalid-feedback\">\n            <div *ngIf=\"f.confirm_password.errors.required\">Password is required</div>\n            <div *ngIf=\"f.confirm_password.errors.required\">Password Mismatch</div>\n          </div>\n        </div>\n        <button [attr.disabled]=\"loading ? true: null\" type=\"submit\" class=\"btn btn-block btn-primary mb-3 lift\">\n          <span class=\"spark-text has--loading\" [ngClass]=\"{'has--loading': loading}\">\n            {{ loading ? 'Loading' : 'Reset Passowrd' }}\n          </span>\n        </button>\n      </form>\n    </div>\n  </div>\n</div>","import { Routes } from '@angular/router';\n\nimport { ForgotComponent } from './forgot/forgot.component';\nimport { LockScreenComponent } from './lock-screen/lock-screen.component';\nimport { ResetComponent } from './reset/reset.component';\nimport { SigninComponent } from './signin/signin.component';\n\nexport const AuthRoutes: Routes = [\n  { path: 'signin', component: SigninComponent },\n  { path: 'forgot-password', component: ForgotComponent },\n  { path: 'reset-password', component: ResetComponent },\n  { path: 'lockscreen', component: LockScreenComponent },\n];\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { take } from 'rxjs/operators';\n\nimport { AuthService } from '../../../services'\n@Component({\n  selector: 'app-signin',\n  templateUrl: './signin.component.html',\n  styleUrls: ['./signin.component.scss']\n})\nexport class SigninComponent implements OnInit {\n  public signinForm!: FormGroup;\n\n  public submitted: Boolean = false;\n  public loading: Boolean = false;\n  public passwordType: String = 'password';\n  public togglePasswordShow: Boolean = true;\n  public hasError: Boolean = false;\n  public error: String = '';\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private _route: Router,\n    private _authService: AuthService\n  ) { }\n\n  ngOnInit(): void {\n    this.signinForm = this.formBuilder.group({\n      username: ['', [Validators.required, Validators.email, Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')]],\n    password: ['', Validators.required],\n      remember_me: [],\n    });\n  }\n  // convenience getter for easy access to form fields\n  get f() {\n    console.log('THE ERRORS', this.signinForm.controls)\n    return this.signinForm.controls;\n  }\n  signIn() {\n    this.submitted = true;\n    this.hasError = false;\n    this.error = '';\n\n    if (this.signinForm.invalid) {\n      return;\n    }\n\n    this.loading = true;\n\n    this._authService.signIn(this.signinForm.value)\n    .pipe(take(1))\n    .subscribe(\n      () => {\n        this.loading = false;\n        this.submitted = false;\n      },\n      (error) => {\n        this.loading = false;\n        this.submitted = false;\n        this.hasError = true;\n        console.log('SIGNIN ERROR', error)\n\n          error === 'Invalid credentials given.'\n            ? this.error = 'Wrong Username/Password Combination'\n            : this.error = 'Oops! You caught us doing some house keeping. Try again after a few minutes. Kindly contact your administrator if issue persists!';\n      \n      }\n    );\n  }\n\n  toggleShowPassword() {\n    this.togglePasswordShow = !this.togglePasswordShow;\n    this.passwordType = this._authService.toggleShowPassword(this.passwordType);\n  }\n\n}\n","<!-- todo: standard all the label fonts for auth pages -->\n<div class=\"container\">\n  <div class=\"row justify-content-center\">\n    <div class=\"col-12 col-md-5 col-xl-4 my-5\">\n      <h1 class=\"display-4 text-center mb-3\">\n        Sign In\n      </h1>\n      <p class=\"text-muted text-center mb-5\">\n        Gain access to our dashboard\n      </p>\n      <span *ngIf=\"hasError\">{{error}}</span>\n      <form class=\"authentication__form\" [formGroup]=\"signinForm\" (ngSubmit)=\"signIn()\">\n        <div class=\"form-group\">\n          <label class=\"form-label\" for=\"signin-email\">Email Address</label>\n          <input aria-label=\"Email sign in\" id=\"signin-email\" type=\"email\" name=\"email\" class=\"form-control\"\n            formControlName=\"username\" placeholder=\"name@address.com\" />\n          <div *ngIf=\"submitted && f.username.errors\" class=\"form-invalid-feedback\"\n            [ngClass]=\"{'form.is-invalid': submitted && f.username.errors}\">\n            <div *ngIf=\"f.username.errors.required\">Email address is required</div>\n            <div *ngIf=\"f.username.errors.pattern || f.username.errors.email\">Enter a valid email</div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <div class=\"row\">\n            <div class=\"col\">\n              <label class=\"form-label\" for=\"password\">Password</label>\n            </div>\n            <div class=\"col-auto\">\n              <a [routerLink]=\"['/forgot-password']\" class=\"form-text form-link forgot small\"> Forgot password? </a>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <input aria_label=\"password\" id=\"password\" formControlName=\"password\" type={{passwordType}}\n              class=\"form-control form-control-appended\" placeholder=\"Enter your password\" />\n            <div *ngIf=\"submitted && f.password.errors\" class=\"form-invalid-feedback\"\n              [ngClass]=\"{'form.is-invalid': submitted && f.password.errors}\">\n              <div *ngIf=\"f.password.errors.required\">Password is required</div>\n            </div>\n            <div (click)=\"toggleShowPassword()\" class=\"form-control-icon password\"\n              [ngClass]=\"{'is--hidden': submitted && f.password.errors}\">\n              <span class=\"\">\n                <i class=\"fa fa-eye\" *ngIf=\"togglePasswordShow\"></i>\n                <i class=\"fa fa-eye-slash\" *ngIf=\"!togglePasswordShow\"></i>\n              </span>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group form-check\">\n          <input aria_label=\"Remember me\" type=\"checkbox\" formControlName=\"remember_me\" id=\"rememberMe\"\n            class=\"form-check-input\" />\n          <label class=\"form-label\" for=\"rememberMe\" class=\"form-check-label\">Remember Me</label>\n        </div>\n        <button [attr.disabled]=\"loading ? true: null\" type=\"submit\" class=\"btn btn btn-block btn-primary mb-3 lift\">\n          <span class=\"spark-text has--loading\" [ngClass]=\"{'has--loading': loading}\">\n            {{ loading ? 'Signing In' : 'Sign In' }}\n          </span>\n        </button>\n      </form>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from 'src/app/services';\n\n@Component({\n  selector: 'app-forgot',\n  templateUrl: './forgot.component.html',\n  styleUrls: ['./forgot.component.scss']\n})\nexport class ForgotComponent implements OnInit {\n  public forgotPasswordForm!: FormGroup;\n  public submitted: boolean = false;\n  public loading: boolean = false;\n  public error: boolean = false;\n  public errorMessage!: string;\n\n  constructor(\n    private _authService: AuthService,\n    private formBuilder: FormBuilder\n  ) { }\n\n  ngOnInit(): void {\n    this.forgotPasswordForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email, Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')]],\n    })\n\n  }\n\n  get f() {\n    console.log(this.forgotPasswordForm.controls);\n    return this.forgotPasswordForm.controls;\n  }\n\n  forgotPassword() {\n    this.error = false;\n    this.submitted = true;\n    this.loading = true;\n\n    if (this.forgotPasswordForm.invalid) {\n      this.loading = false;\n      return;\n    }\n\n\n    this._authService.forgotPassword(this.forgotPasswordForm.value).subscribe((res) => {\n      if (res) {\n        this.loading = false;\n        this.submitted = false;\n      }\n\n      if (res.detail === 'Failed to send email.') {\n        this.error = true;\n        this.errorMessage = res.detail;\n        return;\n      }\n\n      this.forgotPasswordForm.reset();\n\n    }, error => {\n\n      this.error = true;\n      this.loading = false;\n      this.submitted = false;\n      console.log('THERE IS AN ERROR', error);\n      if (error.detail) {\n        this.errorMessage = error.detail;\n      }\n    })\n  }\n\n  resetPassword() {\n\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"row justify-content-center\">\n    <div class=\"col-12 col-md-5 col-xl-4 my-5\">\n      <h1 class=\"display-4 text-center mb-3\">\n        Password reset\n      </h1>\n      <p class=\"text-muted text-center mb-5\">\n        Enter your email to get a password reset link.\n      </p>\n      <div *ngIf=\"error\">{{errorMessage}}</div>\n      <form class=\"authentication__form\" [formGroup]=\"forgotPasswordForm\" (ngSubmit)=\"forgotPassword()\">\n        <div class=\"form-group\">\n          <label for=\"signin-email\">Email Address</label>\n          <input aria-label=\"Email sign in\" id=\"signin-email\" type=\"email\" name=\"email\" class=\"form-control\"\n            formControlName=\"email\" placeholder=\"name@address.com\"\n            [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\n          <div *ngIf=\"submitted && f.email.errors\" class=\"form-invalid-feedback\"\n            [ngClass]=\"{'form.is-invalid': submitted && f.email.errors}\">\n            <div *ngIf=\"f.email.errors.required\">Email address is required</div>\n            <div *ngIf=\"f.email.errors.pattern || f.email.errors.email\">Enter a valid email</div>\n          </div>\n        </div>\n        <button [attr.disabled]=\"loading ? true: null\" type=\"submit\" class=\"btn btn-lg btn-block btn-primary mb-3 lift\">\n          <span class=\"spark-text has--loading\" [ngClass]=\"{'has--loading': loading}\">\n            {{ loading ? 'Loading' : 'Get Instructions' }}\n          </span>\n        </button>\n      </form>\n      <div class=\"forgot__remember-me-link\">\n        <p class=\"text-center\">Remembered your login?\n          <a [routerLink]=\"['/signin']\"> Sign In </a>\n        </p>\n      </div>\n    </div>\n  </div>\n</div>","import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\n\nexport function PasswordValidator(regex: RegExp, error: ValidationErrors): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } => {\n        if (!control.value) {\n            //if control is empty return no error\n            return null!;\n        }\n\n        //check the value of the control agains regex supplied\n        const valid = regex.test(control.value);\n\n        return valid ? null! : error!;\n    }\n}\n","import { FormGroup } from '@angular/forms';\n\nexport function MustMatch( controlName: string, matchingControlName: string ) {\n    return(formGroup: FormGroup) => {\n        const control = formGroup.controls[controlName];\n        const matchingControl = formGroup.controls[matchingControlName];\n\n        if ( matchingControl.errors && !matchingControl.errors.mustMatch ) {\n            //if there's another validator with which found an error\n            return;\n        }\n\n        if ( control.value !== matchingControl.value ) {\n            matchingControl.setErrors({ mustMatch: true});\n        } else {\n            matchingControl.setErrors(null);\n        }\n    }\n}"],"sourceRoot":"webpack:///"}